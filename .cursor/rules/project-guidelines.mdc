---
alwaysApply: true
description: 视频管理应用项目全局开发规则和技术栈指南
---

# 视频管理桌面应用 - 开发规则

## 项目概述
这是一个基于 Tauri + Vue3 的跨平台视频文件管理桌面应用，使用现代化的前端技术栈构建。

## 技术栈

### 前端技术
- **Vue 3.5+**: 使用 Composition API 和 `<script setup>` 语法糖
- **TypeScript 5.6**: 严格模式，target 为 ES2020
- **Vite 5**: 构建工具和开发服务器
- **Tailwind CSS 3.4**: 原子化 CSS 框架，用于所有样式
- **Pinia 2.1**: 状态管理，用于项目列表持久化和浏览器状态

### 桌面框架
- **Tauri 2.x**: 使用 Rust 构建的轻量级桌面容器
- **Tauri Plugins**: 
  - `@tauri-apps/plugin-fs`: 文件系统操作
  - `@tauri-apps/plugin-dialog`: 原生对话框
  - `@tauri-apps/plugin-shell`: Shell 命令执行

### Rust 依赖
- `tauri 2`: 核心框架
- `serde/serde_json`: JSON 序列化
- `base64`: Base64 编解码
- `sha2`: SHA-256 哈希

## 项目结构

参考完整结构文档 [README.md](mdc:README.md)，关键目录：

- `src/components/`: Vue 组件
  - [LeftSidebar.vue](mdc:src/components/LeftSidebar.vue) - 项目列表
  - [Toolbar.vue](mdc:src/components/Toolbar.vue) - 工具栏
  - [VideoGrid.vue](mdc:src/components/VideoGrid.vue) - 视频网格
  - [RightPlayer.vue](mdc:src/components/RightPlayer.vue) - 播放器
  - [ContextMenu.vue](mdc:src/components/ContextMenu.vue) - 右键菜单
- `src/stores/`: Pinia 状态管理
  - [projects.ts](mdc:src/stores/projects.ts) - 项目持久化
  - [browser.ts](mdc:src/stores/browser.ts) - 浏览器状态
- `src/utils/`: 工具函数
  - [fs.ts](mdc:src/utils/fs.ts) - 文件系统封装
  - [thumbnail.ts](mdc:src/utils/thumbnail.ts) - 缩略图生成
- `src-tauri/src/`: Rust 后端代码
  - [main.rs](mdc:src-tauri/src/main.rs) - Rust 入口

## 开发规范

### TypeScript 规范
1. **严格模式**: 启用所有 TypeScript 严格检查
2. **类型优先**: 避免使用 `any`，优先使用明确类型或泛型
3. **路径别名**: 使用 `@/` 别名引用 src 目录（如 `import { xxx } from '@/utils/fs'`）
4. **JSX 配置**: 使用 `preserve` 模式让 Vue 处理

### Vue 3 规范
1. **Composition API**: 统一使用 `<script setup>` 语法
2. **响应式**: 使用 `ref`/`reactive` 声明响应式数据
3. **生命周期**: 使用 `onMounted`/`onUnmounted` 等组合式 API
4. **Props/Emits**: 使用 TypeScript 接口定义类型

### Tailwind CSS 规范
1. **原子化优先**: 使用 Tailwind 工具类而非自定义 CSS
2. **响应式设计**: 使用 Tailwind 断点（`sm:`/`md:`/`lg:` 等）
3. **暗色模式**: 准备支持 `dark:` 前缀（未来功能）
4. **组件样式**: 避免在 `<style>` 块中编写自定义样式，使用 Tailwind

### Tauri 集成规范
1. **API 导入**: 从 `@tauri-apps/api` 和插件包导入功能
2. **安全性**: 使用 Tauri 的 IPC 通信，避免直接 Node.js API
3. **文件操作**: 通过 `@tauri-apps/plugin-fs` 进行文件系统操作
4. **对话框**: 使用 `@tauri-apps/plugin-dialog` 显示原生对话框

### Pinia 状态管理
1. **Store 组织**: 按功能模块拆分 store（projects/browser）
2. **持久化**: 使用 Tauri fs API 手动持久化到配置目录
3. **响应式**: Store 返回的状态自动响应式，组件中直接使用

### 代码风格
1. **缩进**: 2 空格
2. **引号**: 单引号优先（字符串）
3. **分号**: TypeScript 中使用分号
4. **命名**:
   - 组件文件: PascalCase（`VideoGrid.vue`）
   - 工具函数: camelCase（`getThumbnail`）
   - 常量: UPPER_SNAKE_CASE（`MAX_SIZE`）

## 开发命令

```bash
# 开发模式（启动 Vite + Tauri）
npm run tauri:dev

# 类型检查 + 构建前端
npm run build

# 构建生产版本
npm run tauri:build
```

## 关键功能实现

### 视频缩略图生成
- 使用 HTML5 Video API 在前端生成
- 参考 [thumbnail.ts](mdc:src/utils/thumbnail.ts)

### 文件系统操作
- 通过 Tauri fs 插件实现跨平台文件操作
- 参考 [fs.ts](mdc:src/utils/fs.ts)

### 项目持久化
- 保存到 `AppConfig/projects.json`
- 使用 Tauri 的应用配置目录 API

## 注意事项

1. **Tauri v2**: 本项目使用 Tauri 2.x，API 与 v1 不兼容
2. **跨平台**: 支持 Windows 和 macOS，注意路径分隔符
3. **视频格式**: 依赖浏览器支持的视频格式（MP4/WebM/MOV）
4. **安全性**: 文件操作直接修改磁盘，需谨慎处理删除功能
5. **首次编译**: Rust 后端首次编译需要几分钟
6. confirm 在tauri无法使用，使用ask代替。
7. alert 在tauri无法使用，使用message代替。

## 故障排查

- **类型错误**: 运行 `vue-tsc --noEmit` 检查
- **Tauri 构建失败**: 检查 Rust 工具链版本
- **缩略图不显示**: 检查视频格式浏览器兼容性
- **文件权限**: 确保应用有文件系统访问权限
